

.main{
    display:grid;
    grid-template-columns:150px 200px;
    /* grid-template-columns: repeat(2,2fr 1fr); */
    /* grid-template-columns:repeat(2,1fr) 90px; */
    /* grid-template-columns:repeat(2,1fr); */

    background-color: lightskyblue;
    /* width:500px;
    height:500px; */
    /* grid-template-rows: 200px 200px; */
    /* grid-auto-rows:150px; */
    /* while using grid-auto-rows it content got overflow and we want it to take min and maximun width accroding to content so there comes in minmax()*/
    grid-auto-rows:minmax(150px,auto);
    /* grid-row-gap:20px; */
    /* grid-column-gap:20px; */
    /* grid-row-gap takes gap space from row horizontal */
    /* similary for column grid-column-gap  */
    /* instead of using long hand properties we can simply use grid-gap properties it will work for row and column */
    grid-gap:20px;
    /* justify-content: center; */
    /* place-content:center; */
    grid-template-areas:"header header";
    /* for taking the are we can use grid-tempalate-areas it is used for giving are for rows */
    /* we can define next row after it  */
    /* grid-template-areas:"header header"
                         "sidebar main"
                         "sidebar main" */

                       /* lets talk about align the layout for both vertically and horizontal there are mainly two thing you need to know 
                       which is justify-content: center | end | start | stretch(default) space-around
                       so in flexbox we use justify-content:center |flex-start | flex-end but in grid we need to use start end 
                       this is used for aligning center horizontally
                       for vertically we use align-content:center | stretch  |

                       */
                  align-content:center;
                  justify-content: stretch;
                  /* height:100vh; */

}
.box{
    background:rgb(128, 0, 100);
}

.box1{
    /* grid-area: header; */
    /* as you can see the header takes full area if we take three header it will take three column area horizontally */
     /* instead of grid-are we can use grid-column-start grid-row-start property to give area and its really cool */
     /* grid-column-start:1; */
     /* grid-column-end:3; */
     /* remember one thing it start from 1 and ends to 3 means it is a range of (1,3)
     it will applied for two column of a row. another way of doing is put -1 at the end so it will cover whole row area
     */
   /* grid-row-start:2; */
   /* grid-row-end:4;   */
   /* row concept is same as column but it will take row */
   /* instead of using long hand properties we can use shorthand properties which is recommended */
   grid-column: 1 / 3;
   /* it works perfectly fine as above 1 / 3 means start / end */

}

.box2{
    /* grid-area:sidebar; */
    /* so the concepts is same */
    /* lets do something new */
    /* grid-row-start: 2; */
    /* grid-row-end:4; */
    /* shorthand */
    /* grid-row:2 / 4; */
    /* aslo we can use span to take how much column or row area  lets see*/
    grid-row: 2 span;
    /* either do 2 span or span 2 is same which means take 2 row area which is equivalent to grid-row:2 / 4 (since it is starting from 2 and end to 4 )*/

}
.box3{
    /* grid-area:main; */
}